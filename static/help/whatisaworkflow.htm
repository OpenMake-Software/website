<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html><html xmlns="https://www.w3.org/1999/xhtml"><head><title>What is a Workflow</title>
<meta charset="utf-8" /><link rel="stylesheet" type="text/css" href="LinksExt/DevelopingWorkflows.css" />
<script src="js/nethelp.redirector.js" type="text/javascript"></script>
<link rel="prev" href="workflowmanagement.htm" /><link rel="next" href="componentsofworkflowmanagement.htm" />
<meta name="Generator" content="ComponentOne Doc-To-Help v.2014.1.0.935" />
</head>
<body data-c1-topic-id="d7991130-33c9-4890-aab8-9834ea85188d">
<h2>What is a Workflow</h2>
<p class="MsoNormal"> </p>
<p class="t2Text2" style="MARGIN-LEFT: 0pt; LINE-HEIGHT: 150%"><span style="FONT-SIZE: 12pt; FONT-FAMILY: 'Times New Roman','serif'; LINE-HEIGHT: 150%">A 
<i>Workflow</i> is a series of activities<i> </i>performed before and after a 
software build (the compile and link process.)  For this reason, 
<i>Workflow</i> management is often called “build management”. It is important 
to note that <i>Workflow</i> management does nothing to manage calls to 
compilers and linkers. This is the function of <i>Build Automation</i>, perfomed 
thorugh <i>Build Services</i>, not <i>Workflow </i>management. 
<i> Workflow</i> management coordinates a series of activites to be 
executed as a single process.  An activity can be any sort of Command Line 
process for your operating system, such as executing a build with OpenMake 
Meister, Maven, Make or Ant, calling a source-code-management (SCM) tool, 
executing static code analysis, sending emails or running test.  
<i>Workflow</i> management is very similar to job scheduling</span></p>
<p class="t2Text2" style="MARGIN-LEFT: 0pt; LINE-HEIGHT: 150%"><span style="FONT-SIZE: 12pt; FONT-FAMILY: 'Times New Roman','serif'; LINE-HEIGHT: 150%">Out 
of the box, there are many pre-defined  <i>Workflow Activities</i> from 
which users can choose to develop the pre and post steps of their 
<i>Workflows</i>. <i>Workflow Activities</i> can be customized or  
pre-defined  application lifecycle plug-ins can be used thus eliminating 
the user’s need to re-invent the process for every application lifecycle tool. 
</span></p>
<p class="MsoNormal" style="LINE-HEIGHT: 150%">The <i>Workflow Editor</i> 
accessible via the Eclipse RCP is the primary user interface used for developing 
<i>Workflows</i> and their associated <i>Workflow Activities</i>.  The 
<i>Workflow Editor</i> also allows you to streamline your <i>Workflow</i> by 
defining relationships between <i>Workflow Activities</i> through chaining. With 
“chained” <i>Workflow Activities</i>, you can define your pre build and post 
build <i>Workflow Activities</i> to execute in a particular order as well as 
execute across <i>Remote Agents </i>and <i>Server Pool</i>s in both a 
distributed or parallelized process.  To further simplify <i>Workflow 
Activity</i> execution, environment variable configuration can be managed based 
on each <i>Workflow Activity</i> or through templates and global profiles.</p>
<p class="MsoNormal" style="LINE-HEIGHT: 150%"> </p><span id="related-topics"></span></body></html>
