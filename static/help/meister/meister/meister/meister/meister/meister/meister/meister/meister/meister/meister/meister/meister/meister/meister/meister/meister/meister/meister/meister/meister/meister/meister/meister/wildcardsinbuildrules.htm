<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><title>Wild Cards in Build Rules</title>
<meta charset="utf-8" /><link rel="stylesheet" type="text/css" href="LinksExt/UsingBuildServices.css" />
<script src="js/nethelp.redirector.js" type="text/javascript"></script>
<link rel="prev" href="buildrules.htm" /><link rel="next" href="phonytargets.htm" />
<meta name="Generator" content="ComponentOne Doc-To-Help v.2014.1.0.935" />
</head>
<body data-c1-topic-id="5bf26f10-6731-4d68-be06-dec403801014">
<h4>Wild Cards in Build Rules</h4>
<p class="MsoNormal"> </p>
<p class="MsoBodyTextIndent" style="MARGIN-LEFT: 32.15pt">In some cases, it may be 
necessary to use wild card substitutions, using an asterisk ( * ) to denote a 
wild card, in the <i>Build Rule</i>.  Wild card substitution is often 
needed when defining rules to support pre-compile steps where actual source code 
is being generated, and used as an intermediate result.  </p>
<p class="MsoBodyTextIndent" style="MARGIN-LEFT: 32.15pt"> </p>
<p class="MsoBodyTextIndent" style="MARGIN-LEFT: 32.15pt">In most cases when 
source code is generated, a standard naming convention is used to name the 
generated file.  The naming convention is based on the name of the 
dependency file. In the Build Rule, you can represent the generated file by 
using a generic symbol allowing for the correct representation of the generated 
source code name.  For example, if you are using IBM's Visual C's IDL 
command, an IDL file called <span style="FONT-FAMILY: 'Courier New'">hello.idl</span> may need to be generated 
into a <i>Final Target </i>called helloC.cpp.  The <i>Build Rule</i> would 
need to be defined with the<i> Final Target </i>defined as <span style="FONT-FAMILY: 'Courier New'">*C.cpp</span>.   When the build 
scripts are generated for this rule, it will replace the "*" with the name of 
the dependency file "hello", resulting in <span style="FONT-FAMILY: 'Courier New'">helloC.cpp</span>.</p>
<p class="MsoBodyTextIndent" style="MARGIN-LEFT: 32.15pt"> </p>
<p class="MsoBodyTextIndent" style="MARGIN-LEFT: 32.15pt">Similarly, it may be 
necessary to use a wild card extension as part of your <i>Build Rule 
</i>dependencies when you do not need to explicitly define what file extension 
the <i>Target</i> is going to have.  This is particularly useful for taking 
many files and adding them to a <span style="FONT-FAMILY: 'Courier New'">.jar</span> file without having to specify 
every possible file extension as a <i>Build Rule</i>'s dependency.  The use 
of a ".*"<i> Build Rule </i>dependency will also allow developers to add a <span style="FONT-FAMILY: 'Courier New'">*.*</span> dependency to their unique 
<i>Target</i> as a dependency.</p>
<p class="MsoBodyTextIndent" style="MARGIN-LEFT: 32.15pt"> </p>
<p class="MsoBodyTextIndent" style="MARGIN-LEFT: 32.15pt">When a wild card 
extension is used as a <i>Build Rule</i>,<span style="FONT-FAMILY: 'Courier New'"> </span>a build script will be generated that 
includes a build step for the <span style="FONT-FAMILY: 'Courier New'">.*</span> 
dependency.  At build time, the build process will resolve the wild card 
files as dependencies to the <i>Target.</i>  </p>
<p class="MsoBodyTextIndent" style="MARGIN-LEFT: 32.15pt"> </p>
<p class="MsoBodyTextIndent" style="MARGIN-LEFT: 32.15pt">The use of wild card 
extensions will not work for a one to one <i>Target</i> to <i>Build Rule</i> 
dependency relationship.  For example<span style="FONT-FAMILY: 'Courier New'"> .* </span> to <span style="FONT-FAMILY: 'Courier New'">.obj</span> will not produce the desired 
results.  Instead the rule must explicitly define the one to one 
relationship, <i>i.e.</i>, ".<span style="FONT-FAMILY: 'Courier New'">cpp</span>" to ".<span style="FONT-FAMILY: 'Courier New'">obj</span>".   </p>
<p class="MsoNormal"> </p>
<p class="MsoBodyTextIndent2"> </p><span id="related-topics"></span></body></html>
