<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><title>Improving Continuous Integration using Build Avoidance</title>
<meta charset="utf-8" />
<script src="js/nethelp.redirector.js" type="text/javascript"></script>
<link rel="prev" href="enhancingyourcontinuousintegrationbuildswithmeisterbuildservices.htm" /><link rel="next" href="improvingciwithcontinuousbuildscripts.htm" />
<meta name="Generator" content="ComponentOne Doc-To-Help v.2014.1.0.935" />
</head>
<body data-c1-topic-id="d586a88f-757d-44c2-b3f2-fe107ca7504e">
<h2>Improving Continuous Integration using Build Avoidance</h2>
<p class="MsoNormal"> </p>
<p class="MsoNormal" style="MARGIN-LEFT: 18pt; LINE-HEIGHT: 150%">To fully support 
a development process where incremental changes are encouraged, the <i>Build</i> 
itself must become incremental.  If not, your <i>Continuous Integration 
</i>process is impeded by a <i>Build</i> process that was written to support a 
waterfall development methodology,  that must build all binaries each time 
– the "big bang" approach.</p>
<p class="MsoNormal" style="MARGIN-LEFT: 18pt; LINE-HEIGHT: 150%"> </p>
<p class="MsoNormal" style="MARGIN-LEFT: 18pt; LINE-HEIGHT: 150%">When using 
OpenMake Meister for powering <i>Build</i>, the default <i>Build</i> is an 
incremental <i>Build</i>.  Nothing special is required to execute a build 
using<i> Build Avoidance</i>.  Your <i>Build</i> will automatically be 
executed on an incremental basis reducing your <i>Build</i> times down from 
hours to minutes.</p>
<p class="MsoNormal" style="MARGIN-LEFT: 18pt; LINE-HEIGHT: 150%"> </p>
<p class="MsoNormal" style="MARGIN-LEFT: 18pt; LINE-HEIGHT: 150%">Incremental 
<i>Builds</i> substantially decrease <i>Build</i> times by avoiding the 
execution of <i>Build</i> steps that are not needed.  This is a critical 
component of lean methodologies such as Agile Unified Process (Agile UP), Scrum, 
and Rhythm (Unified Build Infrastructure).  If you are looking for ways to 
improve <i>Build</i> times, the use of incremental <i>Build</i> will allow you 
to reach your goal. </p>
<p class="MsoNormal" style="MARGIN-LEFT: 18pt; LINE-HEIGHT: 150%">Incremental 
<i>Builds</i> determine all dependent relationships in the <i>Build</i> 
regardless of language.  For Java, an incremental <i>Build</i> determines 
the dependency of all <span style="FONT-FAMILY: 'Courier New'">.jar</span>, 
<span style="FONT-FAMILY: 'Courier New'">.war</span> and <span style="FONT-FAMILY: 'Courier New'">.ear</span> files including jar files that 
are used by other jar files and their dependent java source files.   
Similarly, in more traditional languages such as C/C++ or COBOL, dependency 
relationships are discovered for all included headers, copybooks, etc. </p>
<p class="MsoNormal" style="MARGIN-LEFT: 18pt; LINE-HEIGHT: 150%"> </p>
<p class="MsoNormal" style="MARGIN-LEFT: 18pt; LINE-HEIGHT: 150%">Note:  If 
you choose to always execute <i>Builds</i> using a "clean all" option, pass the 
following parameters to the <span style="FONT-FAMILY: 'Courier New'">om</span> 
process when executing your <i>Builds</i>: </p>
<p class="MsoNormal" style="MARGIN-LEFT: 18pt; LINE-HEIGHT: 150%">     <span style="FONT-FAMILY: 'Courier New'">-a </span>or <span style="FONT-FAMILY: 'Courier New'">clean all</span></p>
<p class="MsoNormal" style="MARGIN-LEFT: 18pt; LINE-HEIGHT: 150%">If the clean all 
parameter is not passed, your <i>Build</i> will be performed in the most 
efficient manner using <i>Build</i> <i>Avoidance.</i></p>
<p class="MsoNormal" style="MARGIN-LEFT: 18pt; LINE-HEIGHT: 150%">     </p><span id="related-topics"></span></body></html>
