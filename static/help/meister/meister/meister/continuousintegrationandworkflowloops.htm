<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><title>Continuous Integration and Workflow Loops</title>
<meta charset="utf-8" /><link rel="stylesheet" type="text/css" href="LinksExt/DevOpsProcesses.css" />
<script src="js/nethelp.redirector.js" type="text/javascript"></script>
<link rel="prev" href="workflowautomationvsbuildanddeployautomation.htm" /><link rel="next" href="distributedworkloadprocessingandmultiplatformworkflows.htm" />
<meta name="Generator" content="ComponentOne Doc-To-Help v.2014.1.0.935" />
</head>
<body data-c1-topic-id="2ba6af3e-bd35-4dab-8f11-edbc3d007c5d">
<h2><i>Continuous Integration</i><i></i><i></i><i> and Workflow 
Loops</i><i></i><i></i><i></i></h2>
<p class="MsoNormal"> </p>
<p class="MsoNormal" style="LINE-HEIGHT: 150%">OpenMake Meister supports a 
Continuous Integration <i>Workflow</i> loop.  Continuous Integration 
provides the ability to support a workflow “loop” that is defined to execute on 
a scheduled basis or triggered by a source code change checked into a version 
control system. The loop can execute a <i>Workflow</i> defined to run several 
tasks in a specific order such as check-out, execute <i>Build</i> automation, 
execute <i>Deploy</i> automation, test and send email notifications.  The 
tasks executed in the loop are supported through the <i>Workflow</i> 
functionality and are defined using the <i>Workflow Editor</i>.  </p>
<p class="MsoNormal" style="LINE-HEIGHT: 150%"> </p>
<p class="MsoNormal" style="LINE-HEIGHT: 150%">For executing your Continuous 
Integration process on a machine other than your local machine, you will need to 
be running a <i>Remote Agent</i> (license required).  Continuous 
Integration running on a shared machine requires the use of a <i>Remote 
Agent</i> to be installed on the same machine as your Source Code Management 
tool.  This allows a Source Code Check-in to trigger the Continuous 
Integration Loop to execute remotely.</p>
<p class="MsoNormal" style="LINE-HEIGHT: 150%"> </p>
<p class="MsoNormal" style="LINE-HEIGHT: 150%">In addition, OpenMake Meister 
further enhances your Continuous Integration process by improving the compile 
and link steps.  It does this in many ways. First, Meister synchronizes 
each developer's IDE build with the Continuous Integration build running outside 
of the IDE.  This synchronization prevents <i>Builds </i>from breaking due 
to a source code change that impacted the build scripts themselves.  
Meister improves build speeds by delivering builds that run using <i>Build 
Avoidance</i>. <i> Build Avoidance</i> is the process of building on an 
"iterative" basis versus a "big bang" basis.  When running builds with 
<i>Build Avoidance</i>, only the items that have been impacted by the source 
code change will be updated.  Because Meister performs deep dependency 
scanning, it has the intelligence to automatically determine the <i>Build</i> 
order, understand what to <i>Build</i> and what not to <i>Build</i>.  This 
<i>Build</i> decision making brings <i>Build</i> times down from hours to a few 
minutes.  If you are looking to improve the quality of your software 
builds, you should consider upgrading to OpenMake Meister to provide you the 
<i>Build </i>automation needed for standardizing and accelerating the process of 
converting source code to binaries.  </p>
<p class="MsoNormal" style="LINE-HEIGHT: 150%"> </p>
<p class="MsoNormal" style="LINE-HEIGHT: 150%">In addition, OpenMake Meister 
improves the consistency of the builds executed during your Continuous 
Integration by automatically updating your <i>Build</i> scripts based on changes 
made inside of popular IDEs such as Eclipse, IBM Rational Application Developer 
and Microsoft Visual Studio/.Net.  </p>
<p class="MsoNormal" style="MARGIN-LEFT: 18pt; LINE-HEIGHT: 150%"> </p><span id="related-topics"></span></body></html>
