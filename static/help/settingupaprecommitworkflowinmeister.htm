<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html><html xmlns="https://www.w3.org/1999/xhtml"><head><title>Setting up a Pre-commit Workflow in Meister</title>
<meta charset="utf-8" /><link rel="stylesheet" type="text/css" href="LinksExt/Meister Pre-Commit Builds.css" />
<script src="js/nethelp.redirector.js" type="text/javascript"></script>
<link rel="prev" href="stepsinaprecommitworkflow.htm" /><link rel="next" href="definingdependencydirectoriestosupportprecommitbuilds.htm" />
<meta name="Generator" content="ComponentOne Doc-To-Help v.2014.1.0.935" />
</head>
<body data-c1-topic-id="ef19b990-93f9-47b3-a469-19768ee8ab19">
<h2>Setting up a Pre-commit Workflow in Meister</h2>
<p class="MsoNormal" style="MARGIN-LEFT: 18pt; LINE-HEIGHT: 150%"> </p>
<p class="MsoNormal" style="MARGIN-LEFT: 18pt; LINE-HEIGHT: 150%"><i>Pre-commit</i> builds are 
executed in a developers "private" work area and mimics a team or continuous 
integration build. The purpose of the <i>Pre-commit</i> build is to execute a 
"private" team build prior to source code changes being committed to a central 
repository ensuring that local changes have not impacted the global build. </p>
<p class="MsoNormal" style="MARGIN-LEFT: 18pt; LINE-HEIGHT: 150%"> </p>
<p class="MsoNormal" style="MARGIN-LEFT: 18pt; LINE-HEIGHT: 150%">Common 
challenges with <i>Pre-commit</i> builds relate to what source code is 
referenced in the <i>Pre-commit</i> build, time delays between your 
<i>Pre-commit</i> build and the continuous integration build, synchronizing 
build meta data between your IDE and the build running outside of the IDE, and 
the time required to execute the <i>Pre-commit</i> build.  </p>
<p class="MsoNormal" style="MARGIN-LEFT: 18pt; LINE-HEIGHT: 150%"> </p>
<p class="MsoNormal" style="MARGIN-LEFT: 18pt; LINE-HEIGHT: 150%">As a developer, 
you commonly re-compile your unique object inside of your IDE.  If the 
re-build inside your IDE is successful and your unit testing has passed, your 
next step is to commit the source code update to the central source code 
repository for a team or continuous integration build.  However, with a 
<i>Pre-commit</i> process, you must basically execute a full build, outside of 
your IDE and in a private work area, prior to committing your source code 
changes back to your source code repository. </p>
<p class="MsoNormal" style="MARGIN-LEFT: 18pt; LINE-HEIGHT: 150%"> </p>
<p class="MsoNormal" style="MARGIN-LEFT: 18pt; LINE-HEIGHT: 150%">In order to 
accomplish this <i>Pre-commit</i> build, you must create a "full build" 
environment in a private work area.  In addition, in order to maintain an 
efficient <i>Pre-commit</i> build process, the build should re-build only the 
updated source code, avoiding  a "clean" build where all source is 
re-built, a process that can take hours.</p>
<p class="MsoNormal" style="MARGIN-LEFT: 18pt; LINE-HEIGHT: 150%"> </p>
<p class="MsoNormal" style="MARGIN-LEFT: 18pt; LINE-HEIGHT: 150%">Meister solves 
these challenges.  First, the management of your Meister <i>Dependency 
Directories </i>will allow you to control where source code will be referenced 
during your <i>Pre-commit</i> build.  You can manage your <i>Dependency 
Directories </i>to also address time delay issues between your <i>Pre-commit</i> 
builds and your continuous integration build.   And to address the 
speed issue, Meister enables builds to be executed with <i>Build 
Avoidance</i>.  This means that only the files that have been updated will 
be re-compiled, reducing build times substantially.  And finally, because 
Meister auto-generates the build scripts, it will allow you to auto-generate a 
build script to build the full application instead of just your individual 
project or subset of the application.</p>
<p class="MsoNormal" style="MARGIN-LEFT: 18pt; LINE-HEIGHT: 150%"> </p><span id="related-topics"></span></body></html>
